#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30128.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Feeder.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Snapdragon")]
	public partial class SnapdragonDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertFeed(Feed instance);
    partial void UpdateFeed(Feed instance);
    partial void DeleteFeed(Feed instance);
    partial void InsertUserFeed(UserFeed instance);
    partial void UpdateUserFeed(UserFeed instance);
    partial void DeleteUserFeed(UserFeed instance);
    partial void Insertaspnet_User(aspnet_User instance);
    partial void Updateaspnet_User(aspnet_User instance);
    partial void Deleteaspnet_User(aspnet_User instance);
    partial void InsertItem(Item instance);
    partial void UpdateItem(Item instance);
    partial void DeleteItem(Item instance);
    partial void InsertClassification(Classification instance);
    partial void UpdateClassification(Classification instance);
    partial void DeleteClassification(Classification instance);
    partial void InsertPrior(Prior instance);
    partial void UpdatePrior(Prior instance);
    partial void DeletePrior(Prior instance);
    partial void InsertProbability(Probability instance);
    partial void UpdateProbability(Probability instance);
    partial void DeleteProbability(Probability instance);
    partial void InsertStopword(Stopword instance);
    partial void UpdateStopword(Stopword instance);
    partial void DeleteStopword(Stopword instance);
    partial void InsertUserVocabulary(UserVocabulary instance);
    partial void UpdateUserVocabulary(UserVocabulary instance);
    partial void DeleteUserVocabulary(UserVocabulary instance);
    partial void InsertVocabulary(Vocabulary instance);
    partial void UpdateVocabulary(Vocabulary instance);
    partial void DeleteVocabulary(Vocabulary instance);
    partial void InsertUserItem(UserItem instance);
    partial void UpdateUserItem(UserItem instance);
    partial void DeleteUserItem(UserItem instance);
    partial void InsertUserHistory(UserHistory instance);
    partial void UpdateUserHistory(UserHistory instance);
    partial void DeleteUserHistory(UserHistory instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertCategoryLog(CategoryLog instance);
    partial void UpdateCategoryLog(CategoryLog instance);
    partial void DeleteCategoryLog(CategoryLog instance);
    partial void InsertLog(Log instance);
    partial void UpdateLog(Log instance);
    partial void DeleteLog(Log instance);
    #endregion
		
		public SnapdragonDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["SnapdragonConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SnapdragonDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SnapdragonDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SnapdragonDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SnapdragonDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Feed> Feeds
		{
			get
			{
				return this.GetTable<Feed>();
			}
		}
		
		public System.Data.Linq.Table<UserFeed> UserFeeds
		{
			get
			{
				return this.GetTable<UserFeed>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_User> aspnet_Users
		{
			get
			{
				return this.GetTable<aspnet_User>();
			}
		}
		
		public System.Data.Linq.Table<Item> Items
		{
			get
			{
				return this.GetTable<Item>();
			}
		}
		
		public System.Data.Linq.Table<Classification> Classifications
		{
			get
			{
				return this.GetTable<Classification>();
			}
		}
		
		public System.Data.Linq.Table<Prior> Priors
		{
			get
			{
				return this.GetTable<Prior>();
			}
		}
		
		public System.Data.Linq.Table<Probability> Probabilities
		{
			get
			{
				return this.GetTable<Probability>();
			}
		}
		
		public System.Data.Linq.Table<Stopword> Stopwords
		{
			get
			{
				return this.GetTable<Stopword>();
			}
		}
		
		public System.Data.Linq.Table<UserVocabulary> UserVocabularies
		{
			get
			{
				return this.GetTable<UserVocabulary>();
			}
		}
		
		public System.Data.Linq.Table<Vocabulary> Vocabularies
		{
			get
			{
				return this.GetTable<Vocabulary>();
			}
		}
		
		public System.Data.Linq.Table<UserItem> UserItems
		{
			get
			{
				return this.GetTable<UserItem>();
			}
		}
		
		public System.Data.Linq.Table<UserHistory> UserHistories
		{
			get
			{
				return this.GetTable<UserHistory>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<CategoryLog> CategoryLogs
		{
			get
			{
				return this.GetTable<CategoryLog>();
			}
		}
		
		public System.Data.Linq.Table<Log> Logs
		{
			get
			{
				return this.GetTable<Log>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Feed")]
	public partial class Feed : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _ContentUrl;
		
		private string _Description;
		
		private System.DateTime _LastChecked;
		
		private System.DateTime _LastPublished;
		
		private string _Title;
		
		private string _Url;
		
		private EntitySet<UserFeed> _UserFeeds;
		
		private EntitySet<Item> _Items;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnContentUrlChanging(string value);
    partial void OnContentUrlChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnLastCheckedChanging(System.DateTime value);
    partial void OnLastCheckedChanged();
    partial void OnLastPublishedChanging(System.DateTime value);
    partial void OnLastPublishedChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    #endregion
		
		public Feed()
		{
			this._UserFeeds = new EntitySet<UserFeed>(new Action<UserFeed>(this.attach_UserFeeds), new Action<UserFeed>(this.detach_UserFeeds));
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentUrl", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		public string ContentUrl
		{
			get
			{
				return this._ContentUrl;
			}
			set
			{
				if ((this._ContentUrl != value))
				{
					this.OnContentUrlChanging(value);
					this.SendPropertyChanging();
					this._ContentUrl = value;
					this.SendPropertyChanged("ContentUrl");
					this.OnContentUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(1024) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastChecked", DbType="DateTime NOT NULL")]
		public System.DateTime LastChecked
		{
			get
			{
				return this._LastChecked;
			}
			set
			{
				if ((this._LastChecked != value))
				{
					this.OnLastCheckedChanging(value);
					this.SendPropertyChanging();
					this._LastChecked = value;
					this.SendPropertyChanged("LastChecked");
					this.OnLastCheckedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastPublished", DbType="DateTime NOT NULL")]
		public System.DateTime LastPublished
		{
			get
			{
				return this._LastPublished;
			}
			set
			{
				if ((this._LastPublished != value))
				{
					this.OnLastPublishedChanging(value);
					this.SendPropertyChanging();
					this._LastPublished = value;
					this.SendPropertyChanged("LastPublished");
					this.OnLastPublishedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(1024) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Feed_UserFeed", Storage="_UserFeeds", ThisKey="Id", OtherKey="FeedId")]
		public EntitySet<UserFeed> UserFeeds
		{
			get
			{
				return this._UserFeeds;
			}
			set
			{
				this._UserFeeds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Feed_Item", Storage="_Items", ThisKey="Id", OtherKey="FeedId")]
		public EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserFeeds(UserFeed entity)
		{
			this.SendPropertyChanging();
			entity.Feed = this;
		}
		
		private void detach_UserFeeds(UserFeed entity)
		{
			this.SendPropertyChanging();
			entity.Feed = null;
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Feed = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Feed = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserFeed")]
	public partial class UserFeed : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Guid _UserId;
		
		private int _FeedId;
		
		private EntityRef<Feed> _Feed;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnFeedIdChanging(int value);
    partial void OnFeedIdChanged();
    #endregion
		
		public UserFeed()
		{
			this._Feed = default(EntityRef<Feed>);
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeedId", DbType="Int NOT NULL")]
		public int FeedId
		{
			get
			{
				return this._FeedId;
			}
			set
			{
				if ((this._FeedId != value))
				{
					if (this._Feed.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFeedIdChanging(value);
					this.SendPropertyChanging();
					this._FeedId = value;
					this.SendPropertyChanged("FeedId");
					this.OnFeedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Feed_UserFeed", Storage="_Feed", ThisKey="FeedId", OtherKey="Id", IsForeignKey=true)]
		public Feed Feed
		{
			get
			{
				return this._Feed.Entity;
			}
			set
			{
				Feed previousValue = this._Feed.Entity;
				if (((previousValue != value) 
							|| (this._Feed.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Feed.Entity = null;
						previousValue.UserFeeds.Remove(this);
					}
					this._Feed.Entity = value;
					if ((value != null))
					{
						value.UserFeeds.Add(this);
						this._FeedId = value.Id;
					}
					else
					{
						this._FeedId = default(int);
					}
					this.SendPropertyChanged("Feed");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_UserFeed", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.UserFeeds.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.UserFeeds.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Users")]
	public partial class aspnet_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _UserId;
		
		private string _UserName;
		
		private string _LoweredUserName;
		
		private string _MobileAlias;
		
		private bool _IsAnonymous;
		
		private System.DateTime _LastActivityDate;
		
		private EntitySet<UserFeed> _UserFeeds;
		
		private EntitySet<Prior> _Priors;
		
		private EntitySet<UserVocabulary> _UserVocabularies;
		
		private EntitySet<UserItem> _UserItems;
		
		private EntitySet<UserHistory> _UserHistories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLoweredUserNameChanging(string value);
    partial void OnLoweredUserNameChanged();
    partial void OnMobileAliasChanging(string value);
    partial void OnMobileAliasChanged();
    partial void OnIsAnonymousChanging(bool value);
    partial void OnIsAnonymousChanged();
    partial void OnLastActivityDateChanging(System.DateTime value);
    partial void OnLastActivityDateChanged();
    #endregion
		
		public aspnet_User()
		{
			this._UserFeeds = new EntitySet<UserFeed>(new Action<UserFeed>(this.attach_UserFeeds), new Action<UserFeed>(this.detach_UserFeeds));
			this._Priors = new EntitySet<Prior>(new Action<Prior>(this.attach_Priors), new Action<Prior>(this.detach_Priors));
			this._UserVocabularies = new EntitySet<UserVocabulary>(new Action<UserVocabulary>(this.attach_UserVocabularies), new Action<UserVocabulary>(this.detach_UserVocabularies));
			this._UserItems = new EntitySet<UserItem>(new Action<UserItem>(this.attach_UserItems), new Action<UserItem>(this.detach_UserItems));
			this._UserHistories = new EntitySet<UserHistory>(new Action<UserHistory>(this.attach_UserHistories), new Action<UserHistory>(this.detach_UserHistories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredUserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredUserName
		{
			get
			{
				return this._LoweredUserName;
			}
			set
			{
				if ((this._LoweredUserName != value))
				{
					this.OnLoweredUserNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredUserName = value;
					this.SendPropertyChanged("LoweredUserName");
					this.OnLoweredUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobileAlias", DbType="NVarChar(16)")]
		public string MobileAlias
		{
			get
			{
				return this._MobileAlias;
			}
			set
			{
				if ((this._MobileAlias != value))
				{
					this.OnMobileAliasChanging(value);
					this.SendPropertyChanging();
					this._MobileAlias = value;
					this.SendPropertyChanged("MobileAlias");
					this.OnMobileAliasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAnonymous", DbType="Bit NOT NULL")]
		public bool IsAnonymous
		{
			get
			{
				return this._IsAnonymous;
			}
			set
			{
				if ((this._IsAnonymous != value))
				{
					this.OnIsAnonymousChanging(value);
					this.SendPropertyChanging();
					this._IsAnonymous = value;
					this.SendPropertyChanged("IsAnonymous");
					this.OnIsAnonymousChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastActivityDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastActivityDate
		{
			get
			{
				return this._LastActivityDate;
			}
			set
			{
				if ((this._LastActivityDate != value))
				{
					this.OnLastActivityDateChanging(value);
					this.SendPropertyChanging();
					this._LastActivityDate = value;
					this.SendPropertyChanged("LastActivityDate");
					this.OnLastActivityDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_UserFeed", Storage="_UserFeeds", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<UserFeed> UserFeeds
		{
			get
			{
				return this._UserFeeds;
			}
			set
			{
				this._UserFeeds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Prior", Storage="_Priors", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Prior> Priors
		{
			get
			{
				return this._Priors;
			}
			set
			{
				this._Priors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_UserVocabulary", Storage="_UserVocabularies", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<UserVocabulary> UserVocabularies
		{
			get
			{
				return this._UserVocabularies;
			}
			set
			{
				this._UserVocabularies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_UserItem", Storage="_UserItems", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<UserItem> UserItems
		{
			get
			{
				return this._UserItems;
			}
			set
			{
				this._UserItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_UserHistory", Storage="_UserHistories", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<UserHistory> UserHistories
		{
			get
			{
				return this._UserHistories;
			}
			set
			{
				this._UserHistories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserFeeds(UserFeed entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_UserFeeds(UserFeed entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_Priors(Prior entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_Priors(Prior entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_UserVocabularies(UserVocabulary entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_UserVocabularies(UserVocabulary entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_UserItems(UserItem entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_UserItems(UserItem entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_UserHistories(UserHistory entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_UserHistories(UserHistory entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Item")]
	public partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _FeedId;
		
		private string _Author;
		
		private string _Description;
		
		private string _Excerpt;
		
		private string _Link;
		
		private System.DateTime _PubDate;
		
		private string _Title;
		
		private System.DateTime _InsertedOn;
		
		private EntitySet<UserItem> _UserItems;
		
		private EntityRef<Feed> _Feed;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFeedIdChanging(int value);
    partial void OnFeedIdChanged();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnExcerptChanging(string value);
    partial void OnExcerptChanged();
    partial void OnLinkChanging(string value);
    partial void OnLinkChanged();
    partial void OnPubDateChanging(System.DateTime value);
    partial void OnPubDateChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnInsertedOnChanging(System.DateTime value);
    partial void OnInsertedOnChanged();
    #endregion
		
		public Item()
		{
			this._UserItems = new EntitySet<UserItem>(new Action<UserItem>(this.attach_UserItems), new Action<UserItem>(this.detach_UserItems));
			this._Feed = default(EntityRef<Feed>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeedId", DbType="Int NOT NULL")]
		public int FeedId
		{
			get
			{
				return this._FeedId;
			}
			set
			{
				if ((this._FeedId != value))
				{
					if (this._Feed.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFeedIdChanging(value);
					this.SendPropertyChanging();
					this._FeedId = value;
					this.SendPropertyChanged("FeedId");
					this.OnFeedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Author", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Excerpt", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Excerpt
		{
			get
			{
				return this._Excerpt;
			}
			set
			{
				if ((this._Excerpt != value))
				{
					this.OnExcerptChanging(value);
					this.SendPropertyChanging();
					this._Excerpt = value;
					this.SendPropertyChanged("Excerpt");
					this.OnExcerptChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Link", DbType="VarChar(1024) NOT NULL", CanBeNull=false)]
		public string Link
		{
			get
			{
				return this._Link;
			}
			set
			{
				if ((this._Link != value))
				{
					this.OnLinkChanging(value);
					this.SendPropertyChanging();
					this._Link = value;
					this.SendPropertyChanged("Link");
					this.OnLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PubDate", DbType="DateTime NOT NULL")]
		public System.DateTime PubDate
		{
			get
			{
				return this._PubDate;
			}
			set
			{
				if ((this._PubDate != value))
				{
					this.OnPubDateChanging(value);
					this.SendPropertyChanging();
					this._PubDate = value;
					this.SendPropertyChanged("PubDate");
					this.OnPubDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(1024) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertedOn", DbType="DateTime NOT NULL")]
		public System.DateTime InsertedOn
		{
			get
			{
				return this._InsertedOn;
			}
			set
			{
				if ((this._InsertedOn != value))
				{
					this.OnInsertedOnChanging(value);
					this.SendPropertyChanging();
					this._InsertedOn = value;
					this.SendPropertyChanged("InsertedOn");
					this.OnInsertedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_UserItem", Storage="_UserItems", ThisKey="Id", OtherKey="ItemId")]
		public EntitySet<UserItem> UserItems
		{
			get
			{
				return this._UserItems;
			}
			set
			{
				this._UserItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Feed_Item", Storage="_Feed", ThisKey="FeedId", OtherKey="Id", IsForeignKey=true)]
		public Feed Feed
		{
			get
			{
				return this._Feed.Entity;
			}
			set
			{
				Feed previousValue = this._Feed.Entity;
				if (((previousValue != value) 
							|| (this._Feed.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Feed.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._Feed.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._FeedId = value.Id;
					}
					else
					{
						this._FeedId = default(int);
					}
					this.SendPropertyChanged("Feed");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserItems(UserItem entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_UserItems(UserItem entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Classification")]
	public partial class Classification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Label;
		
		private EntitySet<Prior> _Priors;
		
		private EntitySet<Probability> _Probabilities;
		
		private EntitySet<UserItem> _UserItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnLabelChanging(string value);
    partial void OnLabelChanged();
    #endregion
		
		public Classification()
		{
			this._Priors = new EntitySet<Prior>(new Action<Prior>(this.attach_Priors), new Action<Prior>(this.detach_Priors));
			this._Probabilities = new EntitySet<Probability>(new Action<Probability>(this.attach_Probabilities), new Action<Probability>(this.detach_Probabilities));
			this._UserItems = new EntitySet<UserItem>(new Action<UserItem>(this.attach_UserItems), new Action<UserItem>(this.detach_UserItems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Label", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Label
		{
			get
			{
				return this._Label;
			}
			set
			{
				if ((this._Label != value))
				{
					this.OnLabelChanging(value);
					this.SendPropertyChanging();
					this._Label = value;
					this.SendPropertyChanged("Label");
					this.OnLabelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Classification_Prior", Storage="_Priors", ThisKey="Id", OtherKey="ClassificationId")]
		public EntitySet<Prior> Priors
		{
			get
			{
				return this._Priors;
			}
			set
			{
				this._Priors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Classification_Probability", Storage="_Probabilities", ThisKey="Id", OtherKey="ClassificationId")]
		public EntitySet<Probability> Probabilities
		{
			get
			{
				return this._Probabilities;
			}
			set
			{
				this._Probabilities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Classification_UserItem", Storage="_UserItems", ThisKey="Id", OtherKey="PredictedClassificationId")]
		public EntitySet<UserItem> UserItems
		{
			get
			{
				return this._UserItems;
			}
			set
			{
				this._UserItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Priors(Prior entity)
		{
			this.SendPropertyChanging();
			entity.Classification = this;
		}
		
		private void detach_Priors(Prior entity)
		{
			this.SendPropertyChanging();
			entity.Classification = null;
		}
		
		private void attach_Probabilities(Probability entity)
		{
			this.SendPropertyChanging();
			entity.Classification = this;
		}
		
		private void detach_Probabilities(Probability entity)
		{
			this.SendPropertyChanging();
			entity.Classification = null;
		}
		
		private void attach_UserItems(UserItem entity)
		{
			this.SendPropertyChanging();
			entity.Classification = this;
		}
		
		private void detach_UserItems(UserItem entity)
		{
			this.SendPropertyChanging();
			entity.Classification = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Prior")]
	public partial class Prior : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ClassificationId;
		
		private System.Guid _UserId;
		
		private double _Probability;
		
		private EntityRef<Classification> _Classification;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnClassificationIdChanging(int value);
    partial void OnClassificationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnProbabilityChanging(double value);
    partial void OnProbabilityChanged();
    #endregion
		
		public Prior()
		{
			this._Classification = default(EntityRef<Classification>);
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassificationId", DbType="Int NOT NULL")]
		public int ClassificationId
		{
			get
			{
				return this._ClassificationId;
			}
			set
			{
				if ((this._ClassificationId != value))
				{
					if (this._Classification.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassificationIdChanging(value);
					this.SendPropertyChanging();
					this._ClassificationId = value;
					this.SendPropertyChanged("ClassificationId");
					this.OnClassificationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Probability", DbType="Float NOT NULL")]
		public double Probability
		{
			get
			{
				return this._Probability;
			}
			set
			{
				if ((this._Probability != value))
				{
					this.OnProbabilityChanging(value);
					this.SendPropertyChanging();
					this._Probability = value;
					this.SendPropertyChanged("Probability");
					this.OnProbabilityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Classification_Prior", Storage="_Classification", ThisKey="ClassificationId", OtherKey="Id", IsForeignKey=true)]
		public Classification Classification
		{
			get
			{
				return this._Classification.Entity;
			}
			set
			{
				Classification previousValue = this._Classification.Entity;
				if (((previousValue != value) 
							|| (this._Classification.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Classification.Entity = null;
						previousValue.Priors.Remove(this);
					}
					this._Classification.Entity = value;
					if ((value != null))
					{
						value.Priors.Add(this);
						this._ClassificationId = value.Id;
					}
					else
					{
						this._ClassificationId = default(int);
					}
					this.SendPropertyChanged("Classification");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Prior", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.Priors.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.Priors.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Probability")]
	public partial class Probability : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserVocabularyId;
		
		private int _ClassificationId;
		
		private double _Estimate;
		
		private EntityRef<Classification> _Classification;
		
		private EntityRef<UserVocabulary> _UserVocabulary;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserVocabularyIdChanging(int value);
    partial void OnUserVocabularyIdChanged();
    partial void OnClassificationIdChanging(int value);
    partial void OnClassificationIdChanged();
    partial void OnEstimateChanging(double value);
    partial void OnEstimateChanged();
    #endregion
		
		public Probability()
		{
			this._Classification = default(EntityRef<Classification>);
			this._UserVocabulary = default(EntityRef<UserVocabulary>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserVocabularyId", DbType="Int NOT NULL")]
		public int UserVocabularyId
		{
			get
			{
				return this._UserVocabularyId;
			}
			set
			{
				if ((this._UserVocabularyId != value))
				{
					if (this._UserVocabulary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserVocabularyIdChanging(value);
					this.SendPropertyChanging();
					this._UserVocabularyId = value;
					this.SendPropertyChanged("UserVocabularyId");
					this.OnUserVocabularyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassificationId", DbType="Int NOT NULL")]
		public int ClassificationId
		{
			get
			{
				return this._ClassificationId;
			}
			set
			{
				if ((this._ClassificationId != value))
				{
					if (this._Classification.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassificationIdChanging(value);
					this.SendPropertyChanging();
					this._ClassificationId = value;
					this.SendPropertyChanged("ClassificationId");
					this.OnClassificationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Estimate", DbType="Float NOT NULL")]
		public double Estimate
		{
			get
			{
				return this._Estimate;
			}
			set
			{
				if ((this._Estimate != value))
				{
					this.OnEstimateChanging(value);
					this.SendPropertyChanging();
					this._Estimate = value;
					this.SendPropertyChanged("Estimate");
					this.OnEstimateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Classification_Probability", Storage="_Classification", ThisKey="ClassificationId", OtherKey="Id", IsForeignKey=true)]
		public Classification Classification
		{
			get
			{
				return this._Classification.Entity;
			}
			set
			{
				Classification previousValue = this._Classification.Entity;
				if (((previousValue != value) 
							|| (this._Classification.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Classification.Entity = null;
						previousValue.Probabilities.Remove(this);
					}
					this._Classification.Entity = value;
					if ((value != null))
					{
						value.Probabilities.Add(this);
						this._ClassificationId = value.Id;
					}
					else
					{
						this._ClassificationId = default(int);
					}
					this.SendPropertyChanged("Classification");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserVocabulary_Probability", Storage="_UserVocabulary", ThisKey="UserVocabularyId", OtherKey="Id", IsForeignKey=true)]
		public UserVocabulary UserVocabulary
		{
			get
			{
				return this._UserVocabulary.Entity;
			}
			set
			{
				UserVocabulary previousValue = this._UserVocabulary.Entity;
				if (((previousValue != value) 
							|| (this._UserVocabulary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserVocabulary.Entity = null;
						previousValue.Probabilities.Remove(this);
					}
					this._UserVocabulary.Entity = value;
					if ((value != null))
					{
						value.Probabilities.Add(this);
						this._UserVocabularyId = value.Id;
					}
					else
					{
						this._UserVocabularyId = default(int);
					}
					this.SendPropertyChanged("UserVocabulary");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Stopword")]
	public partial class Stopword : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Word;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnWordChanging(string value);
    partial void OnWordChanged();
    #endregion
		
		public Stopword()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Word", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Word
		{
			get
			{
				return this._Word;
			}
			set
			{
				if ((this._Word != value))
				{
					this.OnWordChanging(value);
					this.SendPropertyChanging();
					this._Word = value;
					this.SendPropertyChanged("Word");
					this.OnWordChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserVocabulary")]
	public partial class UserVocabulary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Guid _UserId;
		
		private int _VocabularyId;
		
		private EntitySet<Probability> _Probabilities;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
		private EntityRef<Vocabulary> _Vocabulary;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnVocabularyIdChanging(int value);
    partial void OnVocabularyIdChanged();
    #endregion
		
		public UserVocabulary()
		{
			this._Probabilities = new EntitySet<Probability>(new Action<Probability>(this.attach_Probabilities), new Action<Probability>(this.detach_Probabilities));
			this._aspnet_User = default(EntityRef<aspnet_User>);
			this._Vocabulary = default(EntityRef<Vocabulary>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VocabularyId", DbType="Int NOT NULL")]
		public int VocabularyId
		{
			get
			{
				return this._VocabularyId;
			}
			set
			{
				if ((this._VocabularyId != value))
				{
					if (this._Vocabulary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVocabularyIdChanging(value);
					this.SendPropertyChanging();
					this._VocabularyId = value;
					this.SendPropertyChanged("VocabularyId");
					this.OnVocabularyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserVocabulary_Probability", Storage="_Probabilities", ThisKey="Id", OtherKey="UserVocabularyId")]
		public EntitySet<Probability> Probabilities
		{
			get
			{
				return this._Probabilities;
			}
			set
			{
				this._Probabilities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_UserVocabulary", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.UserVocabularies.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.UserVocabularies.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vocabulary_UserVocabulary", Storage="_Vocabulary", ThisKey="VocabularyId", OtherKey="Id", IsForeignKey=true)]
		public Vocabulary Vocabulary
		{
			get
			{
				return this._Vocabulary.Entity;
			}
			set
			{
				Vocabulary previousValue = this._Vocabulary.Entity;
				if (((previousValue != value) 
							|| (this._Vocabulary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Vocabulary.Entity = null;
						previousValue.UserVocabularies.Remove(this);
					}
					this._Vocabulary.Entity = value;
					if ((value != null))
					{
						value.UserVocabularies.Add(this);
						this._VocabularyId = value.Id;
					}
					else
					{
						this._VocabularyId = default(int);
					}
					this.SendPropertyChanged("Vocabulary");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Probabilities(Probability entity)
		{
			this.SendPropertyChanging();
			entity.UserVocabulary = this;
		}
		
		private void detach_Probabilities(Probability entity)
		{
			this.SendPropertyChanging();
			entity.UserVocabulary = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Vocabulary")]
	public partial class Vocabulary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Word;
		
		private EntitySet<UserVocabulary> _UserVocabularies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnWordChanging(string value);
    partial void OnWordChanged();
    #endregion
		
		public Vocabulary()
		{
			this._UserVocabularies = new EntitySet<UserVocabulary>(new Action<UserVocabulary>(this.attach_UserVocabularies), new Action<UserVocabulary>(this.detach_UserVocabularies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Word", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Word
		{
			get
			{
				return this._Word;
			}
			set
			{
				if ((this._Word != value))
				{
					this.OnWordChanging(value);
					this.SendPropertyChanging();
					this._Word = value;
					this.SendPropertyChanged("Word");
					this.OnWordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vocabulary_UserVocabulary", Storage="_UserVocabularies", ThisKey="Id", OtherKey="VocabularyId")]
		public EntitySet<UserVocabulary> UserVocabularies
		{
			get
			{
				return this._UserVocabularies;
			}
			set
			{
				this._UserVocabularies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserVocabularies(UserVocabulary entity)
		{
			this.SendPropertyChanging();
			entity.Vocabulary = this;
		}
		
		private void detach_UserVocabularies(UserVocabulary entity)
		{
			this.SendPropertyChanging();
			entity.Vocabulary = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserItem")]
	public partial class UserItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Guid _UserId;
		
		private int _ItemId;
		
		private int _PredictedClassificationId;
		
		private bool _IsRead;
		
		private System.DateTime _ReadTime;
		
		private double _PredictionScore;
		
		private bool _IsClicked;
		
		private EntityRef<Classification> _Classification;
		
		private EntityRef<Item> _Item;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnItemIdChanging(int value);
    partial void OnItemIdChanged();
    partial void OnPredictedClassificationIdChanging(int value);
    partial void OnPredictedClassificationIdChanged();
    partial void OnIsReadChanging(bool value);
    partial void OnIsReadChanged();
    partial void OnReadTimeChanging(System.DateTime value);
    partial void OnReadTimeChanged();
    partial void OnPredictionScoreChanging(double value);
    partial void OnPredictionScoreChanged();
    partial void OnIsClickedChanging(bool value);
    partial void OnIsClickedChanged();
    #endregion
		
		public UserItem()
		{
			this._Classification = default(EntityRef<Classification>);
			this._Item = default(EntityRef<Item>);
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemId", DbType="Int NOT NULL")]
		public int ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIdChanging(value);
					this.SendPropertyChanging();
					this._ItemId = value;
					this.SendPropertyChanged("ItemId");
					this.OnItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PredictedClassificationId", DbType="Int NOT NULL")]
		public int PredictedClassificationId
		{
			get
			{
				return this._PredictedClassificationId;
			}
			set
			{
				if ((this._PredictedClassificationId != value))
				{
					if (this._Classification.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPredictedClassificationIdChanging(value);
					this.SendPropertyChanging();
					this._PredictedClassificationId = value;
					this.SendPropertyChanged("PredictedClassificationId");
					this.OnPredictedClassificationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRead", DbType="Bit NOT NULL")]
		public bool IsRead
		{
			get
			{
				return this._IsRead;
			}
			set
			{
				if ((this._IsRead != value))
				{
					this.OnIsReadChanging(value);
					this.SendPropertyChanging();
					this._IsRead = value;
					this.SendPropertyChanged("IsRead");
					this.OnIsReadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReadTime", DbType="DateTime NOT NULL")]
		public System.DateTime ReadTime
		{
			get
			{
				return this._ReadTime;
			}
			set
			{
				if ((this._ReadTime != value))
				{
					this.OnReadTimeChanging(value);
					this.SendPropertyChanging();
					this._ReadTime = value;
					this.SendPropertyChanged("ReadTime");
					this.OnReadTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PredictionScore", DbType="Float NOT NULL")]
		public double PredictionScore
		{
			get
			{
				return this._PredictionScore;
			}
			set
			{
				if ((this._PredictionScore != value))
				{
					this.OnPredictionScoreChanging(value);
					this.SendPropertyChanging();
					this._PredictionScore = value;
					this.SendPropertyChanged("PredictionScore");
					this.OnPredictionScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsClicked", DbType="Bit NOT NULL")]
		public bool IsClicked
		{
			get
			{
				return this._IsClicked;
			}
			set
			{
				if ((this._IsClicked != value))
				{
					this.OnIsClickedChanging(value);
					this.SendPropertyChanging();
					this._IsClicked = value;
					this.SendPropertyChanged("IsClicked");
					this.OnIsClickedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Classification_UserItem", Storage="_Classification", ThisKey="PredictedClassificationId", OtherKey="Id", IsForeignKey=true)]
		public Classification Classification
		{
			get
			{
				return this._Classification.Entity;
			}
			set
			{
				Classification previousValue = this._Classification.Entity;
				if (((previousValue != value) 
							|| (this._Classification.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Classification.Entity = null;
						previousValue.UserItems.Remove(this);
					}
					this._Classification.Entity = value;
					if ((value != null))
					{
						value.UserItems.Add(this);
						this._PredictedClassificationId = value.Id;
					}
					else
					{
						this._PredictedClassificationId = default(int);
					}
					this.SendPropertyChanged("Classification");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_UserItem", Storage="_Item", ThisKey="ItemId", OtherKey="Id", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.UserItems.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.UserItems.Add(this);
						this._ItemId = value.Id;
					}
					else
					{
						this._ItemId = default(int);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_UserItem", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.UserItems.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.UserItems.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserHistory")]
	public partial class UserHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Guid _UserId;
		
		private bool _HasModel;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnHasModelChanging(bool value);
    partial void OnHasModelChanged();
    #endregion
		
		public UserHistory()
		{
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasModel", DbType="Bit NOT NULL")]
		public bool HasModel
		{
			get
			{
				return this._HasModel;
			}
			set
			{
				if ((this._HasModel != value))
				{
					this.OnHasModelChanging(value);
					this.SendPropertyChanging();
					this._HasModel = value;
					this.SendPropertyChanged("HasModel");
					this.OnHasModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_UserHistory", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.UserHistories.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.UserHistories.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryID;
		
		private string _CategoryName;
		
		private EntitySet<CategoryLog> _CategoryLogs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    #endregion
		
		public Category()
		{
			this._CategoryLogs = new EntitySet<CategoryLog>(new Action<CategoryLog>(this.attach_CategoryLogs), new Action<CategoryLog>(this.detach_CategoryLogs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_CategoryLog", Storage="_CategoryLogs", ThisKey="CategoryID", OtherKey="CategoryID")]
		public EntitySet<CategoryLog> CategoryLogs
		{
			get
			{
				return this._CategoryLogs;
			}
			set
			{
				this._CategoryLogs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CategoryLogs(CategoryLog entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_CategoryLogs(CategoryLog entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CategoryLog")]
	public partial class CategoryLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryLogID;
		
		private int _CategoryID;
		
		private int _LogID;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Log> _Log;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryLogIDChanging(int value);
    partial void OnCategoryLogIDChanged();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnLogIDChanging(int value);
    partial void OnLogIDChanged();
    #endregion
		
		public CategoryLog()
		{
			this._Category = default(EntityRef<Category>);
			this._Log = default(EntityRef<Log>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryLogID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CategoryLogID
		{
			get
			{
				return this._CategoryLogID;
			}
			set
			{
				if ((this._CategoryLogID != value))
				{
					this.OnCategoryLogIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryLogID = value;
					this.SendPropertyChanged("CategoryLogID");
					this.OnCategoryLogIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int NOT NULL")]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogID", DbType="Int NOT NULL")]
		public int LogID
		{
			get
			{
				return this._LogID;
			}
			set
			{
				if ((this._LogID != value))
				{
					if (this._Log.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLogIDChanging(value);
					this.SendPropertyChanging();
					this._LogID = value;
					this.SendPropertyChanged("LogID");
					this.OnLogIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_CategoryLog", Storage="_Category", ThisKey="CategoryID", OtherKey="CategoryID", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.CategoryLogs.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.CategoryLogs.Add(this);
						this._CategoryID = value.CategoryID;
					}
					else
					{
						this._CategoryID = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Log_CategoryLog", Storage="_Log", ThisKey="LogID", OtherKey="LogID", IsForeignKey=true)]
		public Log Log
		{
			get
			{
				return this._Log.Entity;
			}
			set
			{
				Log previousValue = this._Log.Entity;
				if (((previousValue != value) 
							|| (this._Log.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Log.Entity = null;
						previousValue.CategoryLogs.Remove(this);
					}
					this._Log.Entity = value;
					if ((value != null))
					{
						value.CategoryLogs.Add(this);
						this._LogID = value.LogID;
					}
					else
					{
						this._LogID = default(int);
					}
					this.SendPropertyChanged("Log");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Log]")]
	public partial class Log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LogID;
		
		private System.Nullable<int> _EventID;
		
		private int _Priority;
		
		private string _Severity;
		
		private string _Title;
		
		private System.DateTime _Timestamp;
		
		private string _MachineName;
		
		private string _AppDomainName;
		
		private string _ProcessID;
		
		private string _ProcessName;
		
		private string _ThreadName;
		
		private string _Win32ThreadId;
		
		private string _Message;
		
		private string _FormattedMessage;
		
		private EntitySet<CategoryLog> _CategoryLogs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLogIDChanging(int value);
    partial void OnLogIDChanged();
    partial void OnEventIDChanging(System.Nullable<int> value);
    partial void OnEventIDChanged();
    partial void OnPriorityChanging(int value);
    partial void OnPriorityChanged();
    partial void OnSeverityChanging(string value);
    partial void OnSeverityChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnMachineNameChanging(string value);
    partial void OnMachineNameChanged();
    partial void OnAppDomainNameChanging(string value);
    partial void OnAppDomainNameChanged();
    partial void OnProcessIDChanging(string value);
    partial void OnProcessIDChanged();
    partial void OnProcessNameChanging(string value);
    partial void OnProcessNameChanged();
    partial void OnThreadNameChanging(string value);
    partial void OnThreadNameChanged();
    partial void OnWin32ThreadIdChanging(string value);
    partial void OnWin32ThreadIdChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnFormattedMessageChanging(string value);
    partial void OnFormattedMessageChanged();
    #endregion
		
		public Log()
		{
			this._CategoryLogs = new EntitySet<CategoryLog>(new Action<CategoryLog>(this.attach_CategoryLogs), new Action<CategoryLog>(this.detach_CategoryLogs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LogID
		{
			get
			{
				return this._LogID;
			}
			set
			{
				if ((this._LogID != value))
				{
					this.OnLogIDChanging(value);
					this.SendPropertyChanging();
					this._LogID = value;
					this.SendPropertyChanged("LogID");
					this.OnLogIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="Int")]
		public System.Nullable<int> EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Priority", DbType="Int NOT NULL")]
		public int Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this.OnPriorityChanging(value);
					this.SendPropertyChanging();
					this._Priority = value;
					this.SendPropertyChanged("Priority");
					this.OnPriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Severity", DbType="NVarChar(32) NOT NULL", CanBeNull=false)]
		public string Severity
		{
			get
			{
				return this._Severity;
			}
			set
			{
				if ((this._Severity != value))
				{
					this.OnSeverityChanging(value);
					this.SendPropertyChanging();
					this._Severity = value;
					this.SendPropertyChanged("Severity");
					this.OnSeverityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MachineName", DbType="NVarChar(32) NOT NULL", CanBeNull=false)]
		public string MachineName
		{
			get
			{
				return this._MachineName;
			}
			set
			{
				if ((this._MachineName != value))
				{
					this.OnMachineNameChanging(value);
					this.SendPropertyChanging();
					this._MachineName = value;
					this.SendPropertyChanged("MachineName");
					this.OnMachineNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppDomainName", DbType="NVarChar(512) NOT NULL", CanBeNull=false)]
		public string AppDomainName
		{
			get
			{
				return this._AppDomainName;
			}
			set
			{
				if ((this._AppDomainName != value))
				{
					this.OnAppDomainNameChanging(value);
					this.SendPropertyChanging();
					this._AppDomainName = value;
					this.SendPropertyChanged("AppDomainName");
					this.OnAppDomainNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcessID", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string ProcessID
		{
			get
			{
				return this._ProcessID;
			}
			set
			{
				if ((this._ProcessID != value))
				{
					this.OnProcessIDChanging(value);
					this.SendPropertyChanging();
					this._ProcessID = value;
					this.SendPropertyChanged("ProcessID");
					this.OnProcessIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcessName", DbType="NVarChar(512) NOT NULL", CanBeNull=false)]
		public string ProcessName
		{
			get
			{
				return this._ProcessName;
			}
			set
			{
				if ((this._ProcessName != value))
				{
					this.OnProcessNameChanging(value);
					this.SendPropertyChanging();
					this._ProcessName = value;
					this.SendPropertyChanged("ProcessName");
					this.OnProcessNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThreadName", DbType="NVarChar(512)")]
		public string ThreadName
		{
			get
			{
				return this._ThreadName;
			}
			set
			{
				if ((this._ThreadName != value))
				{
					this.OnThreadNameChanging(value);
					this.SendPropertyChanging();
					this._ThreadName = value;
					this.SendPropertyChanged("ThreadName");
					this.OnThreadNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Win32ThreadId", DbType="NVarChar(128)")]
		public string Win32ThreadId
		{
			get
			{
				return this._Win32ThreadId;
			}
			set
			{
				if ((this._Win32ThreadId != value))
				{
					this.OnWin32ThreadIdChanging(value);
					this.SendPropertyChanging();
					this._Win32ThreadId = value;
					this.SendPropertyChanged("Win32ThreadId");
					this.OnWin32ThreadIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="NVarChar(1500)")]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormattedMessage", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string FormattedMessage
		{
			get
			{
				return this._FormattedMessage;
			}
			set
			{
				if ((this._FormattedMessage != value))
				{
					this.OnFormattedMessageChanging(value);
					this.SendPropertyChanging();
					this._FormattedMessage = value;
					this.SendPropertyChanged("FormattedMessage");
					this.OnFormattedMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Log_CategoryLog", Storage="_CategoryLogs", ThisKey="LogID", OtherKey="LogID")]
		public EntitySet<CategoryLog> CategoryLogs
		{
			get
			{
				return this._CategoryLogs;
			}
			set
			{
				this._CategoryLogs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CategoryLogs(CategoryLog entity)
		{
			this.SendPropertyChanging();
			entity.Log = this;
		}
		
		private void detach_CategoryLogs(CategoryLog entity)
		{
			this.SendPropertyChanging();
			entity.Log = null;
		}
	}
}
#pragma warning restore 1591
